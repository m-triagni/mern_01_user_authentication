{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Agni\\\\Udemy\\\\MERNStack_AWS\\\\SourceCode\\\\frontend\\\\pages\\\\auth\\\\password-forget\\\\reset\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { withRouter } from 'next/router';\nimport { useState, useEffect } from 'react';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\nimport { showSuccessMessage, showErrorMessage } from '../../../../utils/alert';\nimport { API } from '../../../../config';\nimport Layout from '../../../../components/Layout';\nimport { listAPI } from '../../../../listAPI';\n\nconst ResetPassword = ({\n  router\n}) => {\n  const buttonState = ['Submit', 'Submitting...'];\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    newPassword: '',\n    token: '',\n    buttonText: buttonState[0],\n    success: '',\n    error: ''\n  });\n  const {\n    newPassword,\n    token,\n    buttonText,\n    success,\n    error\n  } = state;\n  useEffect(() => {\n    let token = router.query.id;\n\n    if (token) {\n      const {\n        name\n      } = jwt.decode(token);\n      setState(_objectSpread({}, state, {\n        name,\n        token\n      }));\n    }\n  }, [router]);\n\n  const handleChange = attributeName => e => {\n    setState(_objectSpread({}, state, {\n      [attributeName]: e.target.value,\n      error: '',\n      success: '',\n      buttonText: buttonState[0]\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setState(_objectSpread({}, state, {\n      buttonText: buttonState[1]\n    }));\n\n    try {\n      const response = await axios.put(`${API}${listAPI.API_ResetPassword}`, {\n        resetPasswordLink: token,\n        newPassword\n      });\n      Router.push(listPage.Page_PasswordResetDone);\n    } catch (error) {\n      setState(_objectSpread({}, state, {\n        newPassword: '',\n        token: '',\n        buttonText: buttonState[0],\n        error: error.response.data.error\n      }));\n    }\n  };\n\n  const passwordResetHead = () => {\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, \"Submit your new password\"), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const passwordResetMessage = () => {\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, success && showSuccessMessage(success), error && showErrorMessage(error));\n  };\n\n  const passwordResetForm = () => {\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, __jsx(\"input\", {\n      value: state.newPassword,\n      onChange: handleChange('newPassword'),\n      type: \"email\",\n      className: \"form-control\",\n      placeholder: \"Type your new pssword\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    })), __jsx(\"button\", {\n      className: \"btn btn-outline-warning btn-block\",\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, buttonText));\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"col-md-6 offset-md-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, passwordResetHead(), passwordResetMessage(), passwordResetForm())));\n};\n\nexport default withRouter(ResetPassword);","map":{"version":3,"sources":["C:/Agni/Udemy/MERNStack_AWS/SourceCode/frontend/pages/auth/password-forget/reset/[id].js"],"names":["withRouter","useState","useEffect","jwt","axios","showSuccessMessage","showErrorMessage","API","Layout","listAPI","ResetPassword","router","buttonState","state","setState","newPassword","token","buttonText","success","error","query","id","name","decode","handleChange","attributeName","e","target","value","handleSubmit","preventDefault","response","put","API_ResetPassword","resetPasswordLink","Router","push","listPage","Page_PasswordResetDone","data","passwordResetHead","passwordResetMessage","passwordResetForm"],"mappings":"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","sourcesContent":["import { withRouter } from 'next/router';\r\nimport {useState, useEffect} from 'react';\r\nimport jwt from 'jsonwebtoken'\r\nimport axios from 'axios'\r\nimport {showSuccessMessage, showErrorMessage} from '../../../../utils/alert';\r\nimport {API} from '../../../../config';\r\nimport Layout from '../../../../components/Layout';\r\n\r\nimport { listAPI } from '../../../../listAPI';\r\n\r\nconst ResetPassword = ({router}) => {\r\n\r\n    const buttonState = ['Submit', 'Submitting...']\r\n\r\n    const [state, setState] = useState({\r\n        newPassword:'',\r\n        token:'',\r\n        buttonText: buttonState[0],\r\n        success: '',\r\n        error: ''\r\n    });\r\n\r\n    const {newPassword, token, buttonText, success, error } = state;\r\n \r\n    useEffect(() => {\r\n        let token = router.query.id;\r\n\r\n        if(token) {\r\n            const {name} = jwt.decode(token)\r\n            setState({...state, name, token})\r\n        }\r\n    },[router])\r\n    \r\n    const handleChange = (attributeName) => (e) => {\r\n        setState({...state, [attributeName]: e.target.value, error:'', success:'', buttonText:buttonState[0]})\r\n    } \r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        setState({...state, buttonText: buttonState[1]})\r\n\r\n        try {\r\n            const response = await axios.put(`${API}${listAPI.API_ResetPassword}`, { resetPasswordLink: token, newPassword });\r\n \r\n            Router.push(listPage.Page_PasswordResetDone) ;\r\n\r\n        }\r\n        catch(error) {\r\n            setState({...state, newPassword:'', token:'', buttonText: buttonState[0], error: error.response.data.error})\r\n        }\r\n\r\n    }\r\n\r\n    \r\n    const passwordResetHead = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Submit your new password</h1>\r\n                <br/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const passwordResetMessage = () => {\r\n        return (\r\n            <React.Fragment>\r\n                {success && showSuccessMessage(success)}\r\n                {error && showErrorMessage(error)}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const passwordResetForm = () => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n                <div className=\"form-group\">\r\n                    <input \r\n                        value={state.newPassword}\r\n                        onChange={handleChange('newPassword')} \r\n                        type=\"email\" className=\"form-control\" placeholder=\"Type your new pssword\" \r\n                        required\r\n                        />\r\n                </div>\r\n                <button className=\"btn btn-outline-warning btn-block\" onClick={handleSubmit}>{buttonText}</button>\r\n            </React.Fragment>\r\n        )\r\n    } \r\n\r\n    return <Layout>\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6 offset-md-3\">\r\n                \r\n                {passwordResetHead()}\r\n                {passwordResetMessage()}\r\n                {passwordResetForm()}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </Layout>\r\n};\r\n\r\nexport default withRouter(ResetPassword);"]},"metadata":{},"sourceType":"module"}