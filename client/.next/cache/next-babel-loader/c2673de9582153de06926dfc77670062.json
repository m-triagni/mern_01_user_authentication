{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport cookie from 'js-cookie';\nimport Router from 'next/router';\nimport { listPage } from '../listPage';\nimport { listEnum } from '../listEnum'; //set in cookie\n\nexport var setCookie = function setCookie(key, value) {\n  if (true) {\n    cookie.set(key, value, {\n      expires: 1 // cookie will be expired in 1 day\n\n    });\n  }\n}; //remove from cookie\n\nexport var removeCookie = function removeCookie(key) {\n  if (true) {\n    cookie.remove(key);\n  }\n}; //get data from cookie, such as: token. It will be useful when we need to make request to server with auth token\n\nexport var getCookie = function getCookie(key) {\n  return true ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\nexport var getCookieFromBrowser = function getCookieFromBrowser(key) {\n  return cookie.get(key);\n}; //set in localstorage\n\nexport var setLocalStorage = function setLocalStorage(key, value) {\n  if (true) {\n    localStorage.setItem(key, _JSON$stringify(value));\n  }\n}; //remove from localstorage\n\nexport var removeLocalStorage = function removeLocalStorage(key) {\n  if (true) {\n    localStorage.removeItem(key);\n  }\n}; //authenticate \n\nexport var authenticate = function authenticate(response, next) {\n  setCookie(listEnum.browserStorageKey.token, response.data.token);\n  setLocalStorage(listEnum.browserStorageKey.user, response.data.user);\n  next();\n}; //access user info from local storage\n\nexport var isAuth = function isAuth() {\n  if (true) {\n    var cookieChecked = getCookie(listEnum.browserStorageKey.token);\n\n    if (cookieChecked) {\n      if (localStorage.getItem(listEnum.browserStorageKey.user)) {\n        return JSON.parse(localStorage.getItem(listEnum.browserStorageKey.user));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport var logout = function logout() {\n  removeLocalStorage(listEnum.browserStorageKey.user);\n  removeCookie(listEnum.browserStorageKey.token);\n  Router.push(listPage.Page_Login);\n};","map":{"version":3,"sources":["C:/Agni/Udemy/MERNStack_AWS/SourceCode/frontend/utils/auth.js"],"names":["cookie","Router","listPage","listEnum","setCookie","key","value","set","expires","removeCookie","remove","getCookie","getCookieFromBrowser","getCookieFromServer","req","get","setLocalStorage","localStorage","setItem","removeLocalStorage","removeItem","authenticate","response","next","browserStorageKey","token","data","user","isAuth","cookieChecked","getItem","JSON","parse","logout","push","Page_Login"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAKC,KAAL,EAAe;AACpC,YAAoB;AAChBN,IAAAA,MAAM,CAACO,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACnBE,MAAAA,OAAO,EAAE,CADU,CACR;;AADQ,KAAvB;AAGH;AACJ,CANM,C,CAQP;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACJ,GAAD,EAAS;AACjC,YAAoB;AAChBL,IAAAA,MAAM,CAACU,MAAP,CAAcL,GAAd;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAACN,GAAD,EAAS;AAE9B,SAAO,OAAkBO,oBAAoB,CAACP,GAAD,CAAtC,GAA8CQ,mBAAmB,CAACR,GAAD,EAAKS,GAAL,CAAxE;AACH,CAHM;AAKP,OAAO,IAAMF,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACP,GAAD,EAAS;AACzC,SAAOL,MAAM,CAACe,GAAP,CAAWV,GAAX,CAAP;AACH,CAFM,C,CAIP;;AACA,OAAO,IAAMW,eAAe,GAAG,SAAlBA,eAAkB,CAACX,GAAD,EAAMC,KAAN,EAAgB;AAC3C,YAAoB;AAChBW,IAAAA,YAAY,CAACC,OAAb,CAAqBb,GAArB,EAA0B,gBAAeC,KAAf,CAA1B;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB,CAACd,GAAD,EAAS;AACvC,YAAoB;AAChBY,IAAAA,YAAY,CAACG,UAAb,CAAwBf,GAAxB;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,IAAMgB,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,IAAX,EAAoB;AAC5CnB,EAAAA,SAAS,CAACD,QAAQ,CAACqB,iBAAT,CAA2BC,KAA5B,EAAmCH,QAAQ,CAACI,IAAT,CAAcD,KAAjD,CAAT;AACAT,EAAAA,eAAe,CAACb,QAAQ,CAACqB,iBAAT,CAA2BG,IAA5B,EAAkCL,QAAQ,CAACI,IAAT,CAAcC,IAAhD,CAAf;AACAJ,EAAAA,IAAI;AACP,CAJM,C,CAMP;;AACA,OAAO,IAAMK,MAAM,GAAG,SAATA,MAAS,GAAM;AACxB,YAAoB;AAChB,QAAMC,aAAa,GAAGlB,SAAS,CAACR,QAAQ,CAACqB,iBAAT,CAA2BC,KAA5B,CAA/B;;AACA,QAAII,aAAJ,EAAmB;AACf,UAAGZ,YAAY,CAACa,OAAb,CAAqB3B,QAAQ,CAACqB,iBAAT,CAA2BG,IAAhD,CAAH,EAA0D;AACtD,eAAOI,IAAI,CAACC,KAAL,CAAWf,YAAY,CAACa,OAAb,CAAqB3B,QAAQ,CAACqB,iBAAT,CAA2BG,IAAhD,CAAX,CAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ;AACJ;AACJ,CAXM;AAaP,OAAO,IAAMM,MAAM,GAAG,SAATA,MAAS,GAAM;AACxBd,EAAAA,kBAAkB,CAAChB,QAAQ,CAACqB,iBAAT,CAA2BG,IAA5B,CAAlB;AACAlB,EAAAA,YAAY,CAACN,QAAQ,CAACqB,iBAAT,CAA2BC,KAA5B,CAAZ;AACAxB,EAAAA,MAAM,CAACiC,IAAP,CAAYhC,QAAQ,CAACiC,UAArB;AACH,CAJM","sourcesContent":["import cookie from 'js-cookie'\r\nimport Router from 'next/router';\r\nimport { listPage } from '../listPage';\r\nimport { listEnum } from '../listEnum';\r\n\r\n//set in cookie\r\nexport const setCookie = (key,value) => {\r\n    if(process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1 // cookie will be expired in 1 day\r\n        })\r\n    }\r\n}\r\n\r\n//remove from cookie\r\nexport const removeCookie = (key) => {\r\n    if(process.browser) {\r\n        cookie.remove(key)\r\n    }\r\n}\r\n\r\n//get data from cookie, such as: token. It will be useful when we need to make request to server with auth token\r\nexport const getCookie = (key) => {\r\n    \r\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key,req);\r\n}\r\n\r\nexport const getCookieFromBrowser = (key) => {\r\n    return cookie.get(key);\r\n}\r\n\r\n//set in localstorage\r\nexport const setLocalStorage = (key, value) => {\r\n    if(process.browser) {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }\r\n}\r\n\r\n//remove from localstorage\r\nexport const removeLocalStorage = (key) => {\r\n    if(process.browser) {\r\n        localStorage.removeItem(key)\r\n    }\r\n}\r\n\r\n//authenticate \r\nexport const authenticate = (response, next) => {\r\n    setCookie(listEnum.browserStorageKey.token, response.data.token);\r\n    setLocalStorage(listEnum.browserStorageKey.user, response.data.user);\r\n    next();\r\n}\r\n\r\n//access user info from local storage\r\nexport const isAuth = () => {\r\n    if(process.browser) {\r\n        const cookieChecked = getCookie(listEnum.browserStorageKey.token)\r\n        if (cookieChecked) {\r\n            if(localStorage.getItem(listEnum.browserStorageKey.user)) {\r\n                return JSON.parse(localStorage.getItem(listEnum.browserStorageKey.user));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    removeLocalStorage(listEnum.browserStorageKey.user);\r\n    removeCookie(listEnum.browserStorageKey.token);\r\n    Router.push(listPage.Page_Login);\r\n}"]},"metadata":{},"sourceType":"module"}