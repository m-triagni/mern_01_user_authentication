{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Agni\\\\Udemy\\\\MERNStack_AWS\\\\SourceCode\\\\frontend\\\\pages\\\\auth\\\\password-forget\\\\reset\\\\[id].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { withRouter } from 'next/router';\nimport { useState, useEffect } from 'react';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\nimport { showSuccessMessage, showErrorMessage } from '../../../../utils/alert';\nimport { API } from '../../../../config';\nimport Layout from '../../../../components/Layout';\nimport { listAPI } from '../../../../listAPI';\n\nvar ResetPassword = function ResetPassword(_ref) {\n  var router = _ref.router;\n  var buttonState = ['Submit', 'Submitting...'];\n\n  var _useState = useState({\n    newPassword: '',\n    token: '',\n    buttonText: buttonState[0],\n    success: '',\n    error: ''\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var newPassword = state.newPassword,\n      token = state.token,\n      buttonText = state.buttonText,\n      success = state.success,\n      error = state.error;\n  useEffect(function () {\n    var token = router.query.id;\n\n    if (token) {\n      var _jwt$decode = jwt.decode(token),\n          name = _jwt$decode.name;\n\n      setState(_objectSpread({}, state, {\n        name: name,\n        token: token\n      }));\n    }\n  }, [router]);\n\n  var handleChange = function handleChange(attributeName) {\n    return function (e) {\n      var _objectSpread2;\n\n      setState(_objectSpread({}, state, (_objectSpread2 = {}, _defineProperty(_objectSpread2, attributeName, e.target.value), _defineProperty(_objectSpread2, \"error\", ''), _defineProperty(_objectSpread2, \"success\", ''), _defineProperty(_objectSpread2, \"buttonText\", buttonState[0]), _objectSpread2)));\n    };\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    var response;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            setState(_objectSpread({}, state, {\n              buttonText: buttonState[1]\n            }));\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.put(\"\".concat(API).concat(listAPI.API_ResetPassword), {\n              resetPasswordLink: token,\n              newPassword: newPassword\n            }));\n\n          case 5:\n            response = _context.sent;\n            Router.push(listPage.Page_PasswordResetDone);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            setState(_objectSpread({}, state, {\n              newPassword: '',\n              token: '',\n              buttonText: buttonState[0],\n              error: _context.t0.response.data.error\n            }));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 9]], _Promise);\n  };\n\n  var passwordResetHead = function passwordResetHead() {\n    return __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, \"Submit your new password\"), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  var passwordResetMessage = function passwordResetMessage() {\n    return __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, success && showSuccessMessage(success), error && showErrorMessage(error));\n  };\n\n  var passwordResetForm = function passwordResetForm() {\n    return __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"form-group\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, __jsx(\"input\", {\n      value: state.newPassword,\n      onChange: handleChange('newPassword'),\n      type: \"email\",\n      className: \"form-control\",\n      placeholder: \"Type your new pssword\",\n      required: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    })), __jsx(\"button\", {\n      className: \"btn btn-outline-warning btn-block\",\n      onClick: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, buttonText));\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"col-md-6 offset-md-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, passwordResetHead(), passwordResetMessage(), passwordResetForm())));\n};\n\nexport default withRouter(ResetPassword);","map":{"version":3,"sources":["C:/Agni/Udemy/MERNStack_AWS/SourceCode/frontend/pages/auth/password-forget/reset/[id].js"],"names":["withRouter","useState","useEffect","jwt","axios","showSuccessMessage","showErrorMessage","API","Layout","listAPI","ResetPassword","router","buttonState","newPassword","token","buttonText","success","error","state","setState","query","id","decode","name","handleChange","attributeName","e","target","value","handleSubmit","preventDefault","put","API_ResetPassword","resetPasswordLink","response","Router","push","listPage","Page_PasswordResetDone","data","passwordResetHead","passwordResetMessage","passwordResetForm"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,kBAAR,EAA4BC,gBAA5B,QAAmD,yBAAnD;AACA,SAAQC,GAAR,QAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,SAASC,OAAT,QAAwB,qBAAxB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAc;AAAA,MAAZC,MAAY,QAAZA,MAAY;AAEhC,MAAMC,WAAW,GAAG,CAAC,QAAD,EAAW,eAAX,CAApB;;AAEA,kBAA0BX,QAAQ,CAAC;AAC/BY,IAAAA,WAAW,EAAC,EADmB;AAE/BC,IAAAA,KAAK,EAAC,EAFyB;AAG/BC,IAAAA,UAAU,EAAEH,WAAW,CAAC,CAAD,CAHQ;AAI/BI,IAAAA,OAAO,EAAE,EAJsB;AAK/BC,IAAAA,KAAK,EAAE;AALwB,GAAD,CAAlC;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAQA,MAAON,WAAP,GAA0DK,KAA1D,CAAOL,WAAP;AAAA,MAAoBC,KAApB,GAA0DI,KAA1D,CAAoBJ,KAApB;AAAA,MAA2BC,UAA3B,GAA0DG,KAA1D,CAA2BH,UAA3B;AAAA,MAAuCC,OAAvC,GAA0DE,KAA1D,CAAuCF,OAAvC;AAAA,MAAgDC,KAAhD,GAA0DC,KAA1D,CAAgDD,KAAhD;AAEAf,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIY,KAAK,GAAGH,MAAM,CAACS,KAAP,CAAaC,EAAzB;;AAEA,QAAGP,KAAH,EAAU;AACN,wBAAeX,GAAG,CAACmB,MAAJ,CAAWR,KAAX,CAAf;AAAA,UAAOS,IAAP,eAAOA,IAAP;;AACAJ,MAAAA,QAAQ,mBAAKD,KAAL;AAAYK,QAAAA,IAAI,EAAJA,IAAZ;AAAkBT,QAAAA,KAAK,EAALA;AAAlB,SAAR;AACH;AACJ,GAPQ,EAOP,CAACH,MAAD,CAPO,CAAT;;AASA,MAAMa,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD;AAAA,WAAmB,UAACC,CAAD,EAAO;AAAA;;AAC3CP,MAAAA,QAAQ,mBAAKD,KAAL,wDAAaO,aAAb,EAA6BC,CAAC,CAACC,MAAF,CAASC,KAAtC,4CAAmD,EAAnD,8CAA+D,EAA/D,iDAA8EhB,WAAW,CAAC,CAAD,CAAzF,oBAAR;AACH,KAFoB;AAAA,GAArB;;AAIA,MAAMiB,YAAY,GAAG,SAAfA,YAAe,CAAMH,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBA,YAAAA,CAAC,CAACI,cAAF;AAEAX,YAAAA,QAAQ,mBAAKD,KAAL;AAAYH,cAAAA,UAAU,EAAEH,WAAW,CAAC,CAAD;AAAnC,eAAR;AAHiB;AAAA;AAAA,6CAMUR,KAAK,CAAC2B,GAAN,WAAaxB,GAAb,SAAmBE,OAAO,CAACuB,iBAA3B,GAAgD;AAAEC,cAAAA,iBAAiB,EAAEnB,KAArB;AAA4BD,cAAAA,WAAW,EAAXA;AAA5B,aAAhD,CANV;;AAAA;AAMPqB,YAAAA,QANO;AAQbC,YAAAA,MAAM,CAACC,IAAP,CAAYC,QAAQ,CAACC,sBAArB;AARa;AAAA;;AAAA;AAAA;AAAA;AAYbnB,YAAAA,QAAQ,mBAAKD,KAAL;AAAYL,cAAAA,WAAW,EAAC,EAAxB;AAA4BC,cAAAA,KAAK,EAAC,EAAlC;AAAsCC,cAAAA,UAAU,EAAEH,WAAW,CAAC,CAAD,CAA7D;AAAkEK,cAAAA,KAAK,EAAE,YAAMiB,QAAN,CAAeK,IAAf,CAAoBtB;AAA7F,eAAR;;AAZa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAkBA,MAAMuB,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,WACI,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH,GAPD;;AASA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/B,WACI,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKzB,OAAO,IAAIX,kBAAkB,CAACW,OAAD,CADlC,EAEKC,KAAK,IAAIX,gBAAgB,CAACW,KAAD,CAF9B,CADJ;AAMH,GAPD;;AASA,MAAMyB,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,WACI,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,KAAK,EAAExB,KAAK,CAACL,WADjB;AAEI,MAAA,QAAQ,EAAEW,YAAY,CAAC,aAAD,CAF1B;AAGI,MAAA,IAAI,EAAC,OAHT;AAGiB,MAAA,SAAS,EAAC,cAH3B;AAG0C,MAAA,WAAW,EAAC,uBAHtD;AAII,MAAA,QAAQ,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,EAUI;AAAQ,MAAA,SAAS,EAAC,mCAAlB;AAAsD,MAAA,OAAO,EAAEK,YAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8Ed,UAA9E,CAVJ,CADJ;AAcH,GAfD;;AAiBA,SAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKyB,iBAAiB,EAFtB,EAGKC,oBAAoB,EAHzB,EAIKC,iBAAiB,EAJtB,CADJ,CADG,CAAP;AAYH,CA5FD;;AA8FA,eAAe1C,UAAU,CAACU,aAAD,CAAzB","sourcesContent":["import { withRouter } from 'next/router';\r\nimport {useState, useEffect} from 'react';\r\nimport jwt from 'jsonwebtoken'\r\nimport axios from 'axios'\r\nimport {showSuccessMessage, showErrorMessage} from '../../../../utils/alert';\r\nimport {API} from '../../../../config';\r\nimport Layout from '../../../../components/Layout';\r\n\r\nimport { listAPI } from '../../../../listAPI';\r\n\r\nconst ResetPassword = ({router}) => {\r\n\r\n    const buttonState = ['Submit', 'Submitting...']\r\n\r\n    const [state, setState] = useState({\r\n        newPassword:'',\r\n        token:'',\r\n        buttonText: buttonState[0],\r\n        success: '',\r\n        error: ''\r\n    });\r\n\r\n    const {newPassword, token, buttonText, success, error } = state;\r\n \r\n    useEffect(() => {\r\n        let token = router.query.id;\r\n\r\n        if(token) {\r\n            const {name} = jwt.decode(token)\r\n            setState({...state, name, token})\r\n        }\r\n    },[router])\r\n    \r\n    const handleChange = (attributeName) => (e) => {\r\n        setState({...state, [attributeName]: e.target.value, error:'', success:'', buttonText:buttonState[0]})\r\n    } \r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        setState({...state, buttonText: buttonState[1]})\r\n\r\n        try {\r\n            const response = await axios.put(`${API}${listAPI.API_ResetPassword}`, { resetPasswordLink: token, newPassword });\r\n \r\n            Router.push(listPage.Page_PasswordResetDone) ;\r\n\r\n        }\r\n        catch(error) {\r\n            setState({...state, newPassword:'', token:'', buttonText: buttonState[0], error: error.response.data.error})\r\n        }\r\n\r\n    }\r\n\r\n    \r\n    const passwordResetHead = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Submit your new password</h1>\r\n                <br/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const passwordResetMessage = () => {\r\n        return (\r\n            <React.Fragment>\r\n                {success && showSuccessMessage(success)}\r\n                {error && showErrorMessage(error)}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const passwordResetForm = () => {\r\n        return (\r\n            <React.Fragment>\r\n                \r\n                <div className=\"form-group\">\r\n                    <input \r\n                        value={state.newPassword}\r\n                        onChange={handleChange('newPassword')} \r\n                        type=\"email\" className=\"form-control\" placeholder=\"Type your new pssword\" \r\n                        required\r\n                        />\r\n                </div>\r\n                <button className=\"btn btn-outline-warning btn-block\" onClick={handleSubmit}>{buttonText}</button>\r\n            </React.Fragment>\r\n        )\r\n    } \r\n\r\n    return <Layout>\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6 offset-md-3\">\r\n                \r\n                {passwordResetHead()}\r\n                {passwordResetMessage()}\r\n                {passwordResetForm()}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </Layout>\r\n};\r\n\r\nexport default withRouter(ResetPassword);"]},"metadata":{},"sourceType":"module"}