{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport cookie from 'js-cookie';\nimport Router from 'next/router';\nimport { listPage } from '../listPage';\nimport { listEnum } from '../listEnum'; //set in cookie\n\nexport var setCookie = function setCookie(key, value) {\n  if (true) {\n    cookie.set(key, value, {\n      expires: 1 // cookie will be expired in 1 day\n\n    });\n  }\n}; //remove from cookie\n\nexport var removeCookie = function removeCookie(key) {\n  if (true) {\n    cookie.remove(key);\n  }\n}; //get data from cookie, such as: token. It will be useful when we need to make request to server with auth token\n\nexport var getCookie = function getCookie(key, req) {\n  return true ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\nexport var getCookieFromBrowser = function getCookieFromBrowser(key) {\n  return cookie.get(key);\n};\nexport var getCookieFromServer = function getCookieFromServer(key, req) {\n  console.log('req.header.cookie: ', req);\n\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  var token = req.headers.cookie.split(';').find(function (c) {\n    return c.trim().startsWith(\"\".concat(key, \"=\"));\n  });\n\n  if (!token) {\n    return undefined;\n  }\n\n  var tokenValue = token.split('=')[1];\n  console.log('getCookieFromServer: ', tokenValue);\n  return tokenValue;\n}; //set in localstorage\n\nexport var setLocalStorage = function setLocalStorage(key, value) {\n  if (true) {\n    localStorage.setItem(key, _JSON$stringify(value));\n  }\n}; //remove from localstorage\n\nexport var removeLocalStorage = function removeLocalStorage(key) {\n  if (true) {\n    localStorage.removeItem(key);\n  }\n}; //authenticate \n\nexport var authenticate = function authenticate(response, next) {\n  setCookie(listEnum.browserStorageKey.token, response.data.token);\n  setLocalStorage(listEnum.browserStorageKey.user, response.data.user);\n  next();\n}; //access user info from local storage\n\nexport var isAuth = function isAuth() {\n  if (true) {\n    var cookieChecked = getCookie(listEnum.browserStorageKey.token);\n\n    if (cookieChecked) {\n      if (localStorage.getItem(listEnum.browserStorageKey.user)) {\n        return JSON.parse(localStorage.getItem(listEnum.browserStorageKey.user));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport var logout = function logout() {\n  removeLocalStorage(listEnum.browserStorageKey.user);\n  removeCookie(listEnum.browserStorageKey.token);\n  Router.push(listPage.Page_Login);\n};","map":{"version":3,"sources":["C:/Agni/Udemy/MERNStack_AWS/SourceCode/frontend/utils/auth.js"],"names":["cookie","Router","listPage","listEnum","setCookie","key","value","set","expires","removeCookie","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","get","console","log","headers","undefined","token","split","find","c","trim","startsWith","tokenValue","setLocalStorage","localStorage","setItem","removeLocalStorage","removeItem","authenticate","response","next","browserStorageKey","data","user","isAuth","cookieChecked","getItem","JSON","parse","logout","push","Page_Login"],"mappings":"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","sourcesContent":["import cookie from 'js-cookie'\r\nimport Router from 'next/router';\r\nimport { listPage } from '../listPage';\r\nimport { listEnum } from '../listEnum';\r\n\r\n//set in cookie\r\nexport const setCookie = (key,value) => {\r\n    if(process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1 // cookie will be expired in 1 day\r\n        })\r\n    }\r\n}\r\n\r\n//remove from cookie\r\nexport const removeCookie = (key) => {\r\n    if(process.browser) {\r\n        cookie.remove(key)\r\n    }\r\n}\r\n\r\n//get data from cookie, such as: token. It will be useful when we need to make request to server with auth token\r\nexport const getCookie = (key, req) => { \r\n    return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key,req);\r\n}\r\n\r\nexport const getCookieFromBrowser = (key) => {\r\n    return cookie.get(key);\r\n}\r\n\r\nexport const getCookieFromServer = (key, req) => {\r\n    console.log('req.header.cookie: ', req)\r\n    if (!req.headers.cookie) {\r\n        return undefined;\r\n    }\r\n\r\n    let token = req.headers.cookie.split(';').find(c => c.trim().startsWith(`${key}=`));\r\n    if(!token) {\r\n        return undefined;\r\n    }\r\n    let tokenValue = token.split('=')[1];\r\n    console.log('getCookieFromServer: ', tokenValue);\r\n\r\n    return tokenValue;\r\n}\r\n\r\n//set in localstorage\r\nexport const setLocalStorage = (key, value) => {\r\n    if(process.browser) {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }\r\n}\r\n\r\n//remove from localstorage\r\nexport const removeLocalStorage = (key) => {\r\n    if(process.browser) {\r\n        localStorage.removeItem(key)\r\n    }\r\n}\r\n\r\n//authenticate \r\nexport const authenticate = (response, next) => {\r\n    setCookie(listEnum.browserStorageKey.token, response.data.token);\r\n    setLocalStorage(listEnum.browserStorageKey.user, response.data.user);\r\n    next();\r\n}\r\n\r\n//access user info from local storage\r\nexport const isAuth = () => {\r\n    if(process.browser) {\r\n        const cookieChecked = getCookie(listEnum.browserStorageKey.token)\r\n        if (cookieChecked) {\r\n            if(localStorage.getItem(listEnum.browserStorageKey.user)) {\r\n                return JSON.parse(localStorage.getItem(listEnum.browserStorageKey.user));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    removeLocalStorage(listEnum.browserStorageKey.user);\r\n    removeCookie(listEnum.browserStorageKey.token);\r\n    Router.push(listPage.Page_Login);\r\n}"]},"metadata":{},"sourceType":"module"}